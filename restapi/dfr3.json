{
  "swagger": "2.0",
  "info": {
    "description": "IN-CORE Service For Fragilities, Repairs, Restorations  and Inventory Mappings",
    "version": "0.8.0",
    "title": "DFR3 Service",
    "contact": {
      "name": "IN-CORE Dev Team",
      "url": "https://incore.ncsa.illinois.edu",
      "email": "incore-dev@lists.illinois.edu"
    },
    "license": {
      "name": "Mozilla Public License 2.0 (MPL 2.0)",
      "url": "https://www.mozilla.org/en-US/MPL/2.0/"
    }
  },
  "host": "incore.ncsa.illinois.edu",
  "basePath": "/dfr3/api",
  "tags": [
    {
      "name": "fragilities"
    },
    {
      "name": "mappings"
    },
    {
      "name": "repairs"
    },
    {
      "name": "restorations"
    },
    {
      "name": "status"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/fragilities": {
      "get": {
        "tags": [
          "fragilities"
        ],
        "summary": "Gets list of fragilities",
        "description": "Apply filters to get the desired set of fragilities",
        "operationId": "getFragilities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "demand",
            "in": "query",
            "description": "demand type filter",
            "required": false,
            "type": "string",
            "x-example": "PGA"
          },
          {
            "name": "hazard",
            "in": "query",
            "description": "hazard type  filter",
            "required": false,
            "type": "string",
            "x-example": "earthquake"
          },
          {
            "name": "inventory",
            "in": "query",
            "description": "Inventory type",
            "required": false,
            "type": "string",
            "x-example": "building"
          },
          {
            "name": "legacy_id",
            "in": "query",
            "description": "Legacy fragility Id from v1",
            "required": false,
            "type": "string"
          },
          {
            "name": "creator",
            "in": "query",
            "description": "Fragility creator's username",
            "required": false,
            "type": "string"
          },
          {
            "name": "space",
            "in": "query",
            "description": "Name of space",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FragilitySet"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "fragilities"
        ],
        "summary": "Create a fragility set",
        "description": "Post a fragility set to the dfr3 service",
        "operationId": "uploadFragilitySet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "json representing the fragility set",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FragilitySet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FragilitySet"
            }
          }
        }
      }
    },
    "/fragilities/{fragilityId}": {
      "get": {
        "tags": [
          "fragilities"
        ],
        "summary": "Gets a fragility by Id",
        "description": "Get a particular fragility based on the id provided",
        "operationId": "getFragilityById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "fragilityId",
            "in": "path",
            "description": "fragility id",
            "required": true,
            "type": "string",
            "x-example": "5b47b2d8337d4a36187c6727"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FragilitySet"
            }
          }
        }
      }
    },
    "/fragilities/search": {
      "get": {
        "tags": [
          "fragilities"
        ],
        "summary": "Search for a text in all fragilities",
        "description": "Gets all fragilities that contain a specific text",
        "operationId": "findFragilities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Text to search by",
            "required": false,
            "type": "string",
            "x-example": "steel"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FragilitySet"
              }
            }
          },
          "404": {
            "description": "No fragilities found with the searched text"
          }
        }
      }
    },
    "/repairs": {
      "get": {
        "tags": [
          "repairs"
        ],
        "summary": "Gets list of repairs",
        "description": "Apply filters to get the desired set of repairs",
        "operationId": "getRepairs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "hazard",
            "in": "query",
            "description": "hazard type  filter",
            "required": false,
            "type": "string",
            "x-example": "earthquake"
          },
          {
            "name": "inventory",
            "in": "query",
            "description": "Inventory type",
            "required": false,
            "type": "string",
            "x-example": "building"
          },
          {
            "name": "creator",
            "in": "query",
            "description": "Repair creator's username",
            "required": false,
            "type": "string"
          },
          {
            "name": "space",
            "in": "query",
            "description": "Name of space",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RepairSet"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repairs"
        ],
        "summary": "Create a repair set",
        "description": "Post a repair set to the repair service",
        "operationId": "uploadRepairSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "json representing the repair set",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepairSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RepairSet"
            }
          }
        }
      }
    },
    "/repairs/{repairId}": {
      "get": {
        "tags": [
          "repairs"
        ],
        "summary": "Gets a repair by Id",
        "description": "Get a particular repair based on the id provided",
        "operationId": "getRepairSetById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "repairId",
            "in": "path",
            "description": "hexadecimal repair id",
            "required": true,
            "type": "string",
            "x-example": "5b47b2d8337d4a36187c6727"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RepairSet"
            }
          }
        }
      }
    },
    "/repairs/search": {
      "get": {
        "tags": [
          "repairs"
        ],
        "summary": "Search for a text in all repairs",
        "description": "Gets all repairs that contain a specific text",
        "operationId": "findRepairs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Text to search by",
            "required": false,
            "type": "string",
            "x-example": "steel"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RepairSet"
              }
            }
          },
          "404": {
            "description": "No repairs found with the searched text"
          }
        }
      }
    },
    "/restorations": {
      "get": {
        "tags": [
          "restorations"
        ],
        "summary": "Gets list of restorations",
        "description": "Apply filters to get the desired set of restorations",
        "operationId": "getRestorations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "hazard",
            "in": "query",
            "description": "hazard type  filter",
            "required": false,
            "type": "string",
            "x-example": "earthquake"
          },
          {
            "name": "inventory",
            "in": "query",
            "description": "Inventory type",
            "required": false,
            "type": "string",
            "x-example": "building"
          },
          {
            "name": "creator",
            "in": "query",
            "description": "Restoration creator's username",
            "required": false,
            "type": "string"
          },
          {
            "name": "space",
            "in": "query",
            "description": "Name of space",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RestorationSet"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "restorations"
        ],
        "summary": "Create a restoration set",
        "description": "Post a restoration set to the restoration service",
        "operationId": "uploadRestorationSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "json representing the restoration set",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestorationSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestorationSet"
            }
          }
        }
      }
    },
    "/restorations/{restorationId}": {
      "get": {
        "tags": [
          "restorations"
        ],
        "summary": "Gets a restoration by Id",
        "description": "Get a particular restoration based on the id provided",
        "operationId": "getRestorationSetById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "restorationId",
            "in": "path",
            "description": "hexadecimal restoration id",
            "required": true,
            "type": "string",
            "x-example": "5b47b2d8337d4a36187c6727"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestorationSet"
            }
          }
        }
      }
    },
    "/restorations/search": {
      "get": {
        "tags": [
          "restorations"
        ],
        "summary": "Search for a text in all restorations",
        "description": "Gets all restorations that contain a specific text",
        "operationId": "findRestorations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Text to search by",
            "required": false,
            "type": "string",
            "x-example": "steel"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RestorationSet"
              }
            }
          },
          "404": {
            "description": "No restorations found with the searched text"
          }
        }
      }
    },
    "/mappings": {
      "get": {
        "tags": [
          "mappings"
        ],
        "summary": "Gets list of all inventory mappings",
        "description": "Apply filters to get the desired set of mappings",
        "operationId": "getMappings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "hazard",
            "in": "query",
            "description": "hazard type  filter",
            "required": false,
            "type": "string",
            "x-example": "earthquake"
          },
          {
            "name": "inventory",
            "in": "query",
            "description": "Inventory type",
            "required": false,
            "type": "string",
            "x-example": "building"
          },
          {
            "name": "mappingType",
            "in": "query",
            "description": "DFR3 Mapping type",
            "required": false,
            "type": "string",
            "x-example": "fragility, restoration, repair"
          },
          {
            "name": "creator",
            "in": "query",
            "description": "Creator's username",
            "required": false,
            "type": "string"
          },
          {
            "name": "space",
            "in": "query",
            "description": "Name of space",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip the first n results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit no of results to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MappingSet"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "mappings"
        ],
        "summary": "Create an inventory mapping",
        "description": "Post a json that represents mapping between inventory's attributes and DFR3 object sets",
        "operationId": "uploadMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "json representing the fragility mapping",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MappingSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MappingSet"
            }
          }
        }
      }
    },
    "/mappings/{mappingSetId}": {
      "get": {
        "tags": [
          "mappings"
        ],
        "summary": "Gets a mapping set by Id",
        "description": "Get a particular mapping set based on the id provided",
        "operationId": "getMappingSetById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "mappingSetId",
            "in": "path",
            "description": "mapping id",
            "required": true,
            "type": "string",
            "x-example": "5b47b2d9337d4a36187c7563"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MappingSet"
            }
          }
        }
      }
    },
    "/mappings/{mappingSetId}/matched": {
      "post": {
        "tags": [
          "mappings"
        ],
        "summary": "Map each inventory to a DFR3 object Id based on the input mapping Id",
        "description": "Returns a json where key is the inventory id that is mapped to a DFR3 object id based on the input mapping id",
        "operationId": "mapFragilities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-auth-userinfo",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "mappingSetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MappingResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Gives the status of the service.",
        "description": "This will provide the status of the service as a JSON.",
        "operationId": "getStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "FragilityCurve": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "FragilitySet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legacyId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paperReference": {
          "$ref": "#/definitions/PaperReference"
        },
        "resultUnit": {
          "type": "string"
        },
        "resultType": {
          "type": "string"
        },
        "hazardType": {
          "type": "string"
        },
        "inventoryType": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "demandType": {
          "type": "string"
        },
        "demandUnits": {
          "type": "string"
        },
        "fragilityCurves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FragilityCurve"
          }
        }
      }
    },
    "PaperReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "doi": {
          "type": "string"
        },
        "yearPublished": {
          "type": "string"
        }
      }
    },
    "DFR3Set": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legacyId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paperReference": {
          "$ref": "#/definitions/PaperReference"
        },
        "resultUnit": {
          "type": "string"
        },
        "resultType": {
          "type": "string"
        },
        "hazardType": {
          "type": "string"
        },
        "inventoryType": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        }
      }
    },
    "MappingResponse": {
      "type": "object",
      "properties": {
        "sets": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/DFR3Set"
          }
        },
        "mapping": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Crs": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "name",
            "link"
          ]
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Feature": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "properties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "geometry": {
              "$ref": "#/definitions/GeoJsonObject"
            },
            "id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "FeatureCollection": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "features": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Feature"
              }
            }
          }
        }
      ]
    },
    "GeoJsonObject": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "crs": {
          "$ref": "#/definitions/Crs"
        },
        "bbox": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "GeometryCollection": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "geometries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJsonObject"
              }
            }
          }
        }
      ]
    },
    "LineString": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LngLatAlt"
              }
            }
          }
        }
      ]
    },
    "LngLatAlt": {
      "type": "object",
      "properties": {
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "altitude": {
          "type": "number",
          "format": "double"
        },
        "additionalElements": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "MappingRequest": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "subject": {
          "$ref": "#/definitions/MappingSubject"
        }
      }
    },
    "MappingSubject": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "string",
          "enum": [
            "Building",
            "Bridge",
            "Roadway",
            "Railway"
          ]
        },
        "inventory": {
          "$ref": "#/definitions/GeoJsonObject"
        }
      }
    },
    "MultiLineString": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LngLatAlt"
                }
              }
            }
          }
        }
      ]
    },
    "MultiPoint": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LngLatAlt"
              }
            }
          }
        }
      ]
    },
    "MultiPolygon": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LngLatAlt"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Point": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "coordinates": {
              "$ref": "#/definitions/LngLatAlt"
            }
          }
        }
      ]
    },
    "Polygon": {
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LngLatAlt"
                }
              }
            }
          }
        }
      ]
    },
    "Mapping": {
      "type": "object",
      "properties": {
        "legacyEntry": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entry": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "MappingSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "hazardType": {
          "type": "string"
        },
        "inventoryType": {
          "type": "string"
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mapping"
          }
        },
        "creator": {
          "type": "string"
        },
        "mappingType": {
          "type": "string"
        }
      }
    },
    "RepairCurve": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "RepairSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legacyId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paperReference": {
          "$ref": "#/definitions/PaperReference"
        },
        "resultUnit": {
          "type": "string"
        },
        "resultType": {
          "type": "string"
        },
        "hazardType": {
          "type": "string"
        },
        "inventoryType": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "timeUnits": {
          "type": "string"
        },
        "repairCurves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepairCurve"
          }
        }
      }
    },
    "RestorationCurve": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "RestorationSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legacyId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paperReference": {
          "$ref": "#/definitions/PaperReference"
        },
        "resultUnit": {
          "type": "string"
        },
        "resultType": {
          "type": "string"
        },
        "hazardType": {
          "type": "string"
        },
        "inventoryType": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "timeUnits": {
          "type": "string"
        },
        "restorationCurves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestorationCurve"
          }
        }
      }
    }
  }
}
